from typing import Tuple
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyorthogonalrouting.Common import Integers
from pyorthogonalrouting.Common import integerListFactory
from pyorthogonalrouting.Functions import distance
from pyorthogonalrouting.Functions import isVerticalSide
from pyorthogonalrouting.Point import Point
from pyorthogonalrouting.enumerations.Side import Side


# import the class you want to test here
# from org.pyut.template import template


class TestFunctions(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 April 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testDistance(self):

        ptA: Point = Point(x=477, y=260)
        ptB: Point = Point(x=477, y=360)

        howFar: int = distance(a=ptA, b=ptB)

        self.assertEqual(100, howFar, 'My computation is incorrect')

    def testIsVerticalSideTop(self):
        self.assertTrue(isVerticalSide(Side.TOP))

    def testIsVerticalSideBottom(self):
        self.assertTrue(isVerticalSide(Side.BOTTOM))

    def testIsVerticalSideRight(self):
        self.assertFalse(isVerticalSide(Side.RIGHT))

    def testIsVerticalSideLeft(self):
        self.assertFalse(isVerticalSide(Side.LEFT))

    def testSort(self):
        verticals: Integers = integerListFactory()
        verticals.append(500)
        verticals.append(77)
        verticals.append(23)
        verticals.append(100)
        verticals.append(5)

        self.logger.debug(f'Before {verticals=}')
        verticals.sort()
        self.logger.debug(f'after {verticals=}')

    def testTSEmulation(self):

        verticals, horizontals = self._runAppendComputation(sideAVertical=False, sideBVertical=False)
        self.assertTrue(len(verticals) == 0)
        self.assertIn(2, horizontals)
        self.assertIn(4, horizontals)

        verticals, horizontals = self._runAppendComputation(sideAVertical=True, sideBVertical=True)
        self.assertTrue(len(horizontals) == 0)
        self.assertIn(1, verticals)
        self.assertIn(3, verticals)

        verticals, horizontals = self._runAppendComputation(sideAVertical=True, sideBVertical=False)
        self.assertIn(1, verticals)
        self.assertIn(4, horizontals)

        verticals, horizontals = self._runAppendComputation(sideAVertical=False, sideBVertical=True)
        self.assertIn(3, verticals)
        self.assertIn(2, horizontals)

    def _runAppendComputation(self, sideAVertical: bool, sideBVertical: bool) -> Tuple[Integers, Integers]:

        verticals:   Integers = integerListFactory()
        horizontals: Integers = integerListFactory()

        originA: Point = Point(x=1, y=2)
        originB: Point = Point(x=3, y=4)

        if sideAVertical is True:
            verticals.append(originA.x)
        else:
            horizontals.append(originA.y)
        if sideBVertical is True:
            verticals.append(originB.x)
        else:
            horizontals.append(originB.y)

        self.logger.debug(f'{verticals=} {horizontals=}')

        return verticals, horizontals


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestFunctions))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
