
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyorthogonalrouting.Point import Point
from pyorthogonalrouting.Point import Points
from pyorthogonalrouting.PointGraph import PointGraph
from pyorthogonalrouting.PointGraph import PointNotFoundException
from pyorthogonalrouting.PointGraph import XStr
from pyorthogonalrouting.PointGraph import XToYDict
from pyorthogonalrouting.PointGraph import YStr
from pyorthogonalrouting.PointGraph import YToPointNodeDict
from pyorthogonalrouting.PointNode import PointNode
from pyorthogonalrouting.enumerations.Direction import Direction

TEST_POINTS: Points = Points([
    Point(x=107, y=50),
    Point(x=111, y=100),
    Point(x=111, y=110),
    Point(x=111, y=120),
    Point(x=420, y=180),
    Point(x=423, y=185),
    Point(x=456, y=29),
    Point(x=458, y=50),
    Point(x=458, y=150),
    Point(x=462, y=100),
    Point(x=463, y=110),
    Point(x=465, y=130),
    Point(x=477, y=260),
    Point(x=477, y=360),
    Point(x=503, y=110),
    Point(x=503, y=130),
])


class TestPointGraph(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 April 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        self._pointGraph: PointGraph = self._buildPointGraph()

    def tearDown(self):
        super().tearDown()

    def testCalculateShortestPathFromSource(self):

        pointGraph:      PointGraph = self._pointGraph
        sourcePoint:     Point      = Point(x=503, y=130)
        sourceNode:      PointNode  = pointGraph.get(p=sourcePoint)

        pointGraph = pointGraph.calculateShortestPathFromSource(graph=pointGraph, source=sourceNode)

        self.logger.debug(f'{pointGraph=}')

    def testCalculateMinimumDistance(self):

        pointGraph:      PointGraph = self._pointGraph
        evaluationPoint: Point      = Point(x=477, y=260)
        sourcePoint:     Point      = Point(x=107, y=50)

        evaluationNode:  PointNode  = pointGraph.get(p=evaluationPoint)
        sourceNode:      PointNode  = pointGraph.get(p=sourcePoint)

        evaluationNode.distance = 1000
        sourceNode.distance = 5

        pointGraph._calculateMinimumDistance(evaluationNode=evaluationNode, sourceNode=sourceNode, edgeWeight=5)
        self.logger.debug(f'{evaluationNode}')

        self.assertEqual(1, len(evaluationNode.shortestPath), 'There should be only 1')

    def testConstruction(self):
        pointGraph: PointGraph   = PointGraph()

        self.assertIsNotNone(pointGraph, 'Simple construction is broken')

    def testAddWithEmptyIndex(self):

        pointGraph: PointGraph = PointGraph()
        tp1:        Point      = Point(x=100, y=500)

        pointGraph.add(p=tp1)

        index: XToYDict = pointGraph._index

        xs: XStr = XStr(str(tp1.x))
        ys: YStr = YStr(str(tp1.y))

        self.assertIn(xs, index, 'Main X entry not created')

        yToPointNodeDict: YToPointNodeDict = index[xs]

        self.assertIn(ys, yToPointNodeDict, 'Y entry not created')

    def testCorrectNumberOfXEntries(self):
        pointGraph: PointGraph = self._pointGraph

        index: XToYDict = pointGraph._index

        self.assertEqual(11, len(index), 'Not enough entries')

    def testCorrectNumberOfYEntries(self):
        pointGraph: PointGraph = self._pointGraph

        index: XToYDict = pointGraph._index

        xs: XStr = XStr('111')
        yToPointNodeDict: YToPointNodeDict = index[xs]
        self.assertEqual(3, len(yToPointNodeDict), 'Not enough Y Entries')

    def testHas(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=477, y=260)

        answer: bool = pointGraph.has(p=searchPoint)

        self.assertTrue(answer, 'WTH, it is supposed to be in the graph')

    def testHasNotX(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=666, y=666)

        answer: bool = pointGraph.has(p=searchPoint)

        self.assertFalse(answer, 'WTH, it is not supposed to be in the graph')

    def testHasNoty(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=111, y=111)

        answer: bool = pointGraph.has(p=searchPoint)

        self.assertFalse(answer, 'WTH, it is not supposed to be in the graph')

    def testGet(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=477, y=260)

        pointNode: PointNode = pointGraph.get(p=searchPoint)

        self.assertIsNotNone(pointNode, 'Wowza, I know it is there')

    def testGetNone(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=1, y=1)

        pointNode: PointNode = pointGraph.get(p=searchPoint)

        self.assertIsNone(pointNode, 'Wowza, There should be no such point node')

    def testConnect(self):
        pointGraph:  PointGraph = self._pointGraph

        ptA: Point = Point(x=477, y=260)
        ptB: Point = Point(x=477, y=360)

        pointGraph.connect(a=ptA, b=ptB)

        nodeA: PointNode = pointGraph.get(p=ptA)
        nodeB: PointNode = pointGraph.get(p=ptB)
        self.assertIn(nodeB, nodeA.adjacentNodes, 'Was not connected')

    def testConnectException(self):

        with self.assertRaises(PointNotFoundException):
            pointGraph: PointGraph = self._pointGraph

            ptA: Point = Point(x=477, y=260)
            ptB: Point = Point(x=666, y=666)

            pointGraph.connect(a=ptA, b=ptB)

    def testDirectionOfNodesVertical(self):
        pointGraph:  PointGraph = self._pointGraph

        ptA: Point = Point(x=111, y=110)
        ptB: Point = Point(x=503, y=110)
        nodeA: PointNode = pointGraph.get(p=ptA)
        nodeB: PointNode = pointGraph.get(p=ptB)

        direction: Direction = pointGraph._directionOfNodes(a=nodeA, b=nodeB)

        self.assertEqual(Direction.VERTICAL, direction, 'Why oh why is it not vertical?')

    def testDirectionOfNodesHorizontal(self):

        pointGraph:  PointGraph = self._pointGraph

        ptA: Point = Point(x=458, y=50)
        ptB: Point = Point(x=458, y=150)

        nodeA: PointNode = pointGraph.get(p=ptA)
        nodeB: PointNode = pointGraph.get(p=ptB)

        direction: Direction = pointGraph._directionOfNodes(a=nodeA, b=nodeB)

        self.assertEqual(Direction.HORIZONTAL, direction, 'Why oh why is it not horizontal?')

    def testDirectionOfNodesUnKnown(self):

        pointGraph: PointGraph = PointGraph()

        ptA: Point = Point(x=4, y=4)
        ptB: Point = Point(x=7, y=7)

        direction: Direction = pointGraph._directionOf(a=ptA, b=ptB)

        self.assertEqual(Direction.UNKNOWN, direction, 'Hmm.')

    def _buildPointGraph(self) -> PointGraph:

        pointGraph: PointGraph = PointGraph()

        for point in TEST_POINTS:
            pointGraph.add(p=point)

        return pointGraph


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestPointGraph))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
