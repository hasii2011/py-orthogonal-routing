
from unittest import TestSuite
from unittest import main as unitTestMain

import json

from codeallybasic.ResourceManager import ResourceManager

from pyorthogonalrouting.Functions import computePt
from pyorthogonalrouting.Functions import makePt

from pyorthogonalrouting.ConnectorPoint import ConnectorPoint

from pyorthogonalrouting.Grid import Grid
from pyorthogonalrouting.Line import Line
from pyorthogonalrouting.Line import Lines
from pyorthogonalrouting.Line import linesFactory

from pyorthogonalrouting.Point import Point
from pyorthogonalrouting.Point import Points
from pyorthogonalrouting.Point import pointsFactory

from pyorthogonalrouting.PointGraph import GraphAndConnections
from pyorthogonalrouting.PointGraph import PointGraph
from pyorthogonalrouting.PointGraph import PointNotFoundException
from pyorthogonalrouting.PointGraph import XStr
from pyorthogonalrouting.PointGraph import XToYDict
from pyorthogonalrouting.PointGraph import YStr
from pyorthogonalrouting.PointGraph import YToPointNodeDict

from pyorthogonalrouting.PointNode import PointNode
from pyorthogonalrouting.Rect import Rect

from pyorthogonalrouting.Rectangle import Rectangle
from pyorthogonalrouting.Rectangle import Rectangles
from pyorthogonalrouting.enumerations.Direction import Direction
from pyorthogonalrouting.enumerations.Side import Side

from tests.ProjectTestBase import ProjectTestBase

TEST_POINTS: Points = Points([
    Point(x=107, y=50),
    Point(x=111, y=100),
    Point(x=111, y=110),
    Point(x=111, y=120),
    Point(x=420, y=180),
    Point(x=423, y=185),
    Point(x=456, y=29),
    Point(x=458, y=50),
    Point(x=458, y=150),
    Point(x=462, y=100),
    Point(x=463, y=110),
    Point(x=465, y=130),
    Point(x=477, y=260),
    Point(x=477, y=360),
    Point(x=503, y=110),
    Point(x=503, y=130),
])


class TestPointGraph(ProjectTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 April 2024
    """
    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        self._pointGraph: PointGraph = self._buildPointGraph()

    def tearDown(self):
        super().tearDown()

    def testCalculateShortestPathFromSource(self):

        pointGraph:      PointGraph = self._pointGraph
        sourcePoint:     Point      = Point(x=503, y=130)
        sourceNode:      PointNode  = pointGraph.get(p=sourcePoint)

        pointGraph = pointGraph.calculateShortestPathFromSource(graph=pointGraph, source=sourceNode)

        self.logger.debug(f'{pointGraph=}')

    def testCalculateMinimumDistance(self):

        pointGraph:      PointGraph = self._pointGraph
        evaluationPoint: Point      = Point(x=477, y=260)
        sourcePoint:     Point      = Point(x=107, y=50)

        evaluationNode:  PointNode  = pointGraph.get(p=evaluationPoint)
        sourceNode:      PointNode  = pointGraph.get(p=sourcePoint)

        evaluationNode.distance = 1000
        sourceNode.distance = 5

        pointGraph._calculateMinimumDistance(evaluationNode=evaluationNode, sourceNode=sourceNode, edgeWeight=5)
        self.logger.debug(f'{evaluationNode}')

        self.assertEqual(1, len(evaluationNode.shortestPath), 'There should be only 1')

    def testConstruction(self):
        pointGraph: PointGraph   = PointGraph()

        self.assertIsNotNone(pointGraph, 'Simple construction is broken')

    def testAddWithEmptyIndex(self):

        pointGraph: PointGraph = PointGraph()
        tp1:        Point      = Point(x=100, y=500)

        pointGraph.add(p=tp1)

        index: XToYDict = pointGraph._index

        xs: XStr = XStr(str(tp1.x))
        ys: YStr = YStr(str(tp1.y))

        self.assertIn(xs, index, 'Main X entry not created')

        yToPointNodeDict: YToPointNodeDict = index[xs]

        self.assertIn(ys, yToPointNodeDict, 'Y entry not created')

    def testCorrectNumberOfXEntries(self):
        pointGraph: PointGraph = self._pointGraph

        index: XToYDict = pointGraph._index

        self.assertEqual(11, len(index), 'Not enough entries')

    def testCorrectNumberOfYEntries(self):
        pointGraph: PointGraph = self._pointGraph

        index: XToYDict = pointGraph._index

        xs: XStr = XStr('111')
        yToPointNodeDict: YToPointNodeDict = index[xs]
        self.assertEqual(3, len(yToPointNodeDict), 'Not enough Y Entries')

    def testHas(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=477, y=260)

        answer: bool = pointGraph.has(p=searchPoint)

        self.assertTrue(answer, 'WTH, it is supposed to be in the graph')

    def testHasNotX(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=666, y=666)

        answer: bool = pointGraph.has(p=searchPoint)

        self.assertFalse(answer, 'WTH, it is not supposed to be in the graph')

    def testHasNoty(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=111, y=111)

        answer: bool = pointGraph.has(p=searchPoint)

        self.assertFalse(answer, 'WTH, it is not supposed to be in the graph')

    def testGet(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=477, y=260)

        pointNode: PointNode = pointGraph.get(p=searchPoint)

        self.assertIsNotNone(pointNode, 'Wowza, I know it is there')

    def testGetNone(self):

        pointGraph:  PointGraph = self._pointGraph
        searchPoint: Point      = Point(x=1, y=1)

        pointNode: PointNode = pointGraph.get(p=searchPoint)

        self.assertIsNone(pointNode, 'Wowza, There should be no such point node')

    def testConnect(self):
        pointGraph:  PointGraph = self._pointGraph

        ptA: Point = Point(x=477, y=260)
        ptB: Point = Point(x=477, y=360)

        pointGraph.connect(a=ptA, b=ptB)

        nodeA: PointNode = pointGraph.get(p=ptA)
        nodeB: PointNode = pointGraph.get(p=ptB)
        self.assertIn(nodeB, nodeA.adjacentNodes, 'Was not connected')

    def testConnectException(self):

        with self.assertRaises(PointNotFoundException):
            pointGraph: PointGraph = self._pointGraph

            ptA: Point = Point(x=477, y=260)
            ptB: Point = Point(x=666, y=666)

            pointGraph.connect(a=ptA, b=ptB)

    def testDirectionOfNodesVertical(self):
        pointGraph:  PointGraph = self._pointGraph

        ptA: Point = Point(x=111, y=110)
        ptB: Point = Point(x=503, y=110)
        nodeA: PointNode = pointGraph.get(p=ptA)
        nodeB: PointNode = pointGraph.get(p=ptB)

        direction: Direction = pointGraph._directionOfNodes(a=nodeA, b=nodeB)

        self.assertEqual(Direction.VERTICAL, direction, 'Why oh why is it not vertical?')

    def testDirectionOfNodesHorizontal(self):

        pointGraph:  PointGraph = self._pointGraph

        ptA: Point = Point(x=458, y=50)
        ptB: Point = Point(x=458, y=150)

        nodeA: PointNode = pointGraph.get(p=ptA)
        nodeB: PointNode = pointGraph.get(p=ptB)

        direction: Direction = pointGraph._directionOfNodes(a=nodeA, b=nodeB)

        self.assertEqual(Direction.HORIZONTAL, direction, 'Why oh why is it not horizontal?')

    def testDirectionOfNodesUnKnown(self):

        pointGraph: PointGraph = PointGraph()

        ptA: Point = Point(x=4, y=4)
        ptB: Point = Point(x=7, y=7)

        direction: Direction = pointGraph._directionOf(a=ptA, b=ptB)

        self.assertEqual(Direction.UNKNOWN, direction, 'Hmm.')

    def testCreateGraph(self):

        grid: Grid = self._buildTesGrid()

        rectA: Rect = Rect(left=50,  top=50,  width=100, height=100)
        rectB: Rect = Rect(left=200, top=200, width=50,  height=100)

        pointA: ConnectorPoint = ConnectorPoint(shape=rectA, side=Side.BOTTOM, distance=0.5)
        pointB: ConnectorPoint = ConnectorPoint(shape=rectB, side=Side.RIGHT,  distance=0.5)

        shapeMargin: int = 10

        shapeA:    Rectangle = Rectangle.fromRect(r=pointA.shape)
        shapeB:    Rectangle = Rectangle.fromRect(r=pointB.shape)

        inflatedA: Rectangle = shapeA.inflate(shapeMargin, shapeMargin)
        inflatedB: Rectangle = shapeB.inflate(shapeMargin, shapeMargin)

        spots:       Points   = pointsFactory()

        def add(pt: Point, dx: int, dy: int):
            spots.append(makePt(pt.x + dx, pt.y + dy))

        # Points of shape antennas
        for connectorPt in [pointA, pointB]:
            p: Point = computePt(p=connectorPt)
            match connectorPt.side:
                case Side.TOP:
                    add(p, dx=0, dy=-shapeMargin)
                case Side.RIGHT:
                    add(p, dx=shapeMargin, dy=0)
                case Side.BOTTOM:
                    add(p, dx=0, dy=shapeMargin)
                case Side.LEFT:
                    add(p, dx=-shapeMargin, dy=0)
                case _:
                    assert False, f'I do not understand that side {connectorPt.side=}'

        gridPoints: Points = Grid.gridToSpots(grid, Rectangles([inflatedA, inflatedB]))

        # Add to spots
        spots = Points(spots + gridPoints)
        #
        #  Whew setup is done
        #
        # Create graph
        graphAndConnections: GraphAndConnections = PointGraph.createGraph(spots)
        graph:       PointGraph = graphAndConnections.graph
        connections: Lines      = graphAndConnections.connections

        goldGraphIndex: XToYDict = self._loadTestGraphIndex()
        goldenLines:    Lines    = self._loadTestConnections()

        for xStr in goldGraphIndex:
            self.assertIn(xStr, graph._index)
            goldenYToPointNodeDict: YToPointNodeDict = goldGraphIndex[xStr]
            generated:              YToPointNodeDict = graph._index[xStr]
            for goldenYStr, goldenPointNode in goldenYToPointNodeDict.items():

                keyExists:  bool = goldenYStr in generated
                self.assertTrue(keyExists, 'Where is my golden key !!')

                generatedValues = generated.values()
                self.logger.debug(f'{generatedValues}')
                valueExists: bool = goldenPointNode in generatedValues
                self.assertTrue(valueExists, f'{xStr=} {goldenYStr=} {goldenPointNode=}')

        # Verify !!!
        for line in connections:
            self.assertIn(line, goldenLines, 'This one is missing')

    def _buildPointGraph(self) -> PointGraph:

        pointGraph: PointGraph = PointGraph()

        for point in TEST_POINTS:
            pointGraph.add(p=point)

        return pointGraph

    def _loadTestGraphIndex(self):
        fqFileName: str = ResourceManager.retrieveResourcePath(bareFileName='graphIndex.json',
                                                               resourcePath=ProjectTestBase.RESOURCES_TEST_DIRECTORY,
                                                               packageName=ProjectTestBase.RESOURCES_TEST_PACKAGE_NAME)

        self.logger.debug(f'{fqFileName=}')
        with open(fqFileName, "r") as fp:
            jsonString: str = fp.read()

        graphIndexDict = json.loads(jsonString)

        index: XToYDict = XToYDict({})
        for xStrEntry in graphIndexDict:
            jsonYToPointNodeDict = graphIndexDict[xStrEntry]
            self.logger.debug(f'{xStrEntry}: {jsonYToPointNodeDict}')

            yToPointNodeDict: YToPointNodeDict = YToPointNodeDict({})
            index[xStrEntry] = yToPointNodeDict

            for yStr, jsonPointNode in jsonYToPointNodeDict.items():

                jsonData      = jsonPointNode['data']
                jsonDistance  = jsonPointNode['distance']
                x: int = int(jsonData['x'])
                y: int = int(jsonData['y'])

                point: Point = Point(x=x, y=y)

                pointNode: PointNode = PointNode()
                pointNode.data = point
                pointNode.distance = int(jsonDistance)
                yToPointNodeDict[yStr] = pointNode

        return index

    def _loadTestConnections(self):
        fqFileName: str = ResourceManager.retrieveResourcePath(bareFileName='connections.json',
                                                               resourcePath=ProjectTestBase.RESOURCES_TEST_DIRECTORY,
                                                               packageName=ProjectTestBase.RESOURCES_TEST_PACKAGE_NAME)

        self.logger.debug(f'{fqFileName=}')
        with open(fqFileName, "r") as fp:
            jsonString: str = fp.read()

        connectionsDict = json.loads(jsonString)

        lines: Lines = linesFactory()
        for conn in connectionsDict:

            aPt = conn['a']
            bPt = conn['b']
            x: int = int(aPt['x'])
            y: int = int(aPt['y'])
            pointA: Point = Point(x=x, y=y)
            x = int(bPt['x'])
            y = int(bPt['y'])
            pointB: Point = Point(x=x, y=y)
            line: Line = Line(a=pointA, b=pointB)
            lines.append(line)

        return lines


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestPointGraph))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
