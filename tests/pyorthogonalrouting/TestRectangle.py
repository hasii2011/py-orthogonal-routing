from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyorthogonalrouting.Functions import makePt
from pyorthogonalrouting.Point import Point
from pyorthogonalrouting.Point import Points
from pyorthogonalrouting.Rectangle import Rectangle
from pyorthogonalrouting.Rectangle import Rectangles


class TestRectangle(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 06 April 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testInflate(self):
        shapeA:    Rectangle = Rectangle(left=50, top=50, width=100, height=100)
        inflatedA: Rectangle = shapeA.inflate(horizontal=10, vertical=10)

        expectedLizzoA:    Rectangle = Rectangle(left=40, top=40, width=120, height=120)

        self.assertEqual(expectedLizzoA, inflatedA, 'Hmm, fatty must have lost some weight')

    def testLTRB(self):

        rectangle1: Rectangle = Rectangle.fromLTRB(10, 20, 50, 50)
        rectangle2: Rectangle = Rectangle.fromLTRB(40, 40, 100, 50)
        rectangle3: Rectangle = Rectangle.fromLTRB(100, 60, 150, 75)

        expectedRectangle1: Rectangle = Rectangle(left=10, top=20, width=40, height=30)

        self.assertEqual(expectedRectangle1, rectangle1, 'My expectations are unmet')
        self.logger.debug(f'{rectangle1=} {rectangle2=} {rectangle3=}')

    def testGetNotColliding(self):

        obstacles: Rectangles = self._makeMeSomeObstacles()

        point1: Point = makePt(5, 5)
        point2: Point = obstacles[1].location
        point3: Point = makePt(305, 305)
        pointsToCheck: Points = Points([point1, point3, point2])

        notColliding: Points = Rectangle.getNotColliding(points=pointsToCheck, rectangles=obstacles)

        self.assertEqual(2, len(notColliding), '')

    def testObstacleCollision(self):

        obstacles: Rectangles = self._makeMeSomeObstacles()
        self.logger.debug(f'{obstacles=}')

        point1: Point = makePt(5, 5)
        point2: Point = obstacles[1].location
        point3: Point = makePt(305, 305)

        collides: bool = Rectangle.obstacleCollision(point=point2, rectangles=obstacles)
        self.assertTrue(collides, 'It is supposed to collide')

        collides = Rectangle.obstacleCollision(point=point1, rectangles=obstacles)
        self.assertFalse(collides, 'It is supported to collide')

        collides = Rectangle.obstacleCollision(point=point3, rectangles=obstacles)
        self.assertFalse(collides, 'It is supported to collide')

    def _makeMeSomeObstacles(self) -> Rectangles:

        rectangle1: Rectangle = Rectangle.fromLTRB(10, 20, 50, 50)
        rectangle2: Rectangle = Rectangle.fromLTRB(40, 40, 100, 50)
        rectangle3: Rectangle = Rectangle.fromLTRB(100, 60, 150, 75)

        obstacles: Rectangles = Rectangles([rectangle1, rectangle2, rectangle3])

        self.logger.debug(f'{obstacles=}')

        return obstacles


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestRectangle))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
