
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyorthogonalrouting.Common import Integers
from pyorthogonalrouting.ConnectorPoint import ConnectorPoint
from pyorthogonalrouting.Grid import ColumnNumber
from pyorthogonalrouting.Grid import Grid
from pyorthogonalrouting.Grid import RowNumber
from pyorthogonalrouting.LeftTopRightBottom import LeftTopRightBottom
from pyorthogonalrouting.Rect import Rect
from pyorthogonalrouting.Rectangle import Rectangle
from pyorthogonalrouting.Rectangle import Rectangles


class TestGrid(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 04 April 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testConstruction(self):
        grid: Grid = Grid()

        self.assertIsNotNone(grid, 'I should exist')

    def testSetOnEmptyGrid(self):

        grid:      Grid      = Grid()
        rectangle: Rectangle = Rectangle.fromLTRB(left=10, top=44, right=100, bottom=200)

        grid.set(row=RowNumber(1), column=ColumnNumber(1), rectangle=rectangle)

        self.assertEqual(2, grid.rows, '')
        self.assertEqual(2, grid.columns, '')

        retrievedRectangle: Rectangle = grid.get(row=RowNumber(1), column=ColumnNumber(1))

        self.assertEqual(retrievedRectangle, rectangle, 'Should be the same')

    def testNoRectangle(self):
        grid:      Grid      = Grid()

        retrievedRectangle: Rectangle = grid.get(row=RowNumber(1), column=ColumnNumber(1))

        self.assertIsNone(retrievedRectangle, 'Should not exist')

    def testNoRectangles(self):

        grid:      Grid      = Grid()

        rectangles: Rectangles = grid.rectangles

        self.assertEqual(0, len(rectangles), 'No rectangles')

    def testMultipleRectangles(self):
        grid:      Grid      = Grid()
        rectangle1: Rectangle = Rectangle.fromLTRB(left=10, top=44,  right=100, bottom=200)
        rectangle2: Rectangle = Rectangle.fromLTRB(left=20, top=88,  right=200, bottom=400)
        rectangle3: Rectangle = Rectangle.fromLTRB(left=40, top=166, right=400, bottom=800)

        grid.set(row=RowNumber(1), column=ColumnNumber(1), rectangle=rectangle3)
        grid.set(row=RowNumber(4), column=ColumnNumber(4), rectangle=rectangle2)
        grid.set(row=RowNumber(8), column=ColumnNumber(8), rectangle=rectangle1)

        rectangles: Rectangles = grid.rectangles

        self.assertEqual(3, len(rectangles), 'No rectangles')

    def testRulersToGrid(self):

        grid: Grid = self._buildTesGrid()

        self.assertEqual(5, grid.rows, 'Incorrect row count')
        self.assertEqual(5, grid.columns, 'Incorrect column count')
        #
        # Check random cells
        #
        expected:  Rectangle = Rectangle(left=30, top=10, width=10, height=10)
        rectangle: Rectangle = grid._gridMap[RowNumber(1)][ColumnNumber(3)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

        expected  = Rectangle(left=40, top=40, width=960, height=960)
        rectangle = grid._gridMap[RowNumber(4)][ColumnNumber(4)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

        expected  = Rectangle(left=30, top=0, width=10, height=10)
        rectangle = grid._gridMap[RowNumber(0)][ColumnNumber(3)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

    def testGridToSpots(self):

        grid: Grid = self._buildTesGrid()

        pointA: ConnectorPoint = ConnectorPoint(shape=Rect(left=50,  top=50,  width=100, height=100))
        pointB: ConnectorPoint = ConnectorPoint(shape=Rect(left=200, top=200, width=50,  height=100))

        shapeA = Rectangle.fromRect(pointA.shape)
        shapeB = Rectangle.fromRect(pointB.shape)

        shapeMargin: int = 10

        inflatedA: Rectangle = shapeA.inflate(shapeMargin, shapeMargin)
        inflatedB: Rectangle = shapeB.inflate(shapeMargin, shapeMargin)

        gridPoints = Grid.gridToSpots(grid, Rectangles([inflatedA, inflatedB]))

        self.logger.debug(f'{gridPoints=}')

    def _buildTesGrid(self) -> Grid:

        bigBounds:   LeftTopRightBottom = LeftTopRightBottom(left=0, top=0, right=1000, bottom=1000)
        bounds:      Rectangle          = Rectangle.fromLTRB(bigBounds.left, bigBounds.top, bigBounds.right, bigBounds.bottom)
        verticals:   Integers           = Integers([10, 20, 30, 40])
        horizontals: Integers           = Integers([10, 20, 30, 40])

        grid: Grid = Grid.rulersToGrid(verticals, horizontals, bounds)

        return grid


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestGrid))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
