
from unittest import TestSuite
from unittest import main as unitTestMain

import json

from codeallybasic.ResourceManager import ResourceManager

from pyorthogonalrouting.ConnectorPoint import ConnectorPoint

from pyorthogonalrouting.Grid import ColumnNumber
from pyorthogonalrouting.Grid import Grid
from pyorthogonalrouting.Grid import RowNumber
from pyorthogonalrouting.Point import Point
from pyorthogonalrouting.Point import Points

from pyorthogonalrouting.Rect import Rect
from pyorthogonalrouting.Rectangle import Rectangle
from pyorthogonalrouting.Rectangle import Rectangles

from tests.ProjectTestBase import ProjectTestBase


class TestGrid(ProjectTestBase):

    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 04 April 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testConstruction(self):
        grid: Grid = Grid()

        self.assertIsNotNone(grid, 'I should exist')

    def testSetOnEmptyGrid(self):

        grid:      Grid      = Grid()
        rectangle: Rectangle = Rectangle.fromLTRB(left=10, top=44, right=100, bottom=200)

        grid.set(row=RowNumber(1), column=ColumnNumber(1), rectangle=rectangle)

        self.assertEqual(2, grid.rows, '')
        self.assertEqual(2, grid.columns, '')

        retrievedRectangle: Rectangle = grid.get(row=RowNumber(1), column=ColumnNumber(1))

        self.assertEqual(retrievedRectangle, rectangle, 'Should be the same')

    def testNoRectangle(self):
        grid:      Grid      = Grid()

        retrievedRectangle: Rectangle = grid.get(row=RowNumber(1), column=ColumnNumber(1))

        self.assertIsNone(retrievedRectangle, 'Should not exist')

    def testNoRectangles(self):

        grid:      Grid      = Grid()

        rectangles: Rectangles = grid.rectangles

        self.assertEqual(0, len(rectangles), 'No rectangles')

    def testMultipleRectangles(self):
        grid:      Grid      = Grid()
        rectangle1: Rectangle = Rectangle.fromLTRB(left=10, top=44,  right=100, bottom=200)
        rectangle2: Rectangle = Rectangle.fromLTRB(left=20, top=88,  right=200, bottom=400)
        rectangle3: Rectangle = Rectangle.fromLTRB(left=40, top=166, right=400, bottom=800)

        grid.set(row=RowNumber(1), column=ColumnNumber(1), rectangle=rectangle3)
        grid.set(row=RowNumber(4), column=ColumnNumber(4), rectangle=rectangle2)
        grid.set(row=RowNumber(8), column=ColumnNumber(8), rectangle=rectangle1)

        rectangles: Rectangles = grid.rectangles

        self.assertEqual(3, len(rectangles), 'No rectangles')

    def testRulersToGrid(self):

        grid: Grid = self._buildTesGrid()

        self.assertEqual(6, grid.rows, 'Incorrect row count')
        self.assertEqual(6, grid.columns, 'Incorrect column count')
        #
        # Check random cells
        #
        expected:  Rectangle = Rectangle(left=160, top=40, width=30, height=120)
        rectangle: Rectangle = grid._gridMap[RowNumber(1)][ColumnNumber(3)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

        expected  = Rectangle(left=190, top=250, width=70, height=60)
        rectangle = grid._gridMap[RowNumber(4)][ColumnNumber(4)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

        expected  = Rectangle(left=160, top=30, width=30, height=10)
        rectangle = grid._gridMap[RowNumber(0)][ColumnNumber(3)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

    def testGridToSpots(self):

        grid: Grid = self._buildTesGrid()

        pointA: ConnectorPoint = ConnectorPoint(shape=Rect(left=50,  top=50,  width=100, height=100))
        pointB: ConnectorPoint = ConnectorPoint(shape=Rect(left=200, top=200, width=50,  height=100))

        shapeA = Rectangle.fromRect(pointA.shape)
        shapeB = Rectangle.fromRect(pointB.shape)

        shapeMargin: int = 10

        inflatedA: Rectangle = shapeA.inflate(shapeMargin, shapeMargin)
        inflatedB: Rectangle = shapeB.inflate(shapeMargin, shapeMargin)

        gridPoints: Points = Grid.gridToSpots(grid, Rectangles([inflatedA, inflatedB]))

        self.logger.debug(f'{gridPoints=}')
        goldenGridSpots: Points = self._loadTestSpots()

        for goldenPoint in goldenGridSpots:
            self.assertIn(goldenPoint, goldenGridSpots, 'Missing one')

    def _loadTestSpots(self) -> Points:

        fqFileName: str = ResourceManager.retrieveResourcePath(bareFileName='gridPoints.json',
                                                               resourcePath=ProjectTestBase.RESOURCES_TEST_DIRECTORY,
                                                               packageName=ProjectTestBase.RESOURCES_TEST_PACKAGE_NAME)

        self.logger.debug(f'{fqFileName=}')
        with open(fqFileName, "r") as fp:
            jsonString: str = fp.read()

        gridSpotsDict = json.loads(jsonString)

        goldenGridSpots: Points = self._buildPointListFromJsonDictionary(gridPointsDictionary=gridSpotsDict)

        return goldenGridSpots

    def _buildPointListFromJsonDictionary(self, gridPointsDictionary) -> Points:

        self.logger.debug(f'{gridPointsDictionary}')
        pointList: Points = Points([])

        for pt in gridPointsDictionary:

            x: int = int(pt['x'])
            y: int = int(pt['y'])
            point: Point = Point(x=x, y=y)
            pointList.append(point)

        return pointList


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestGrid))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
