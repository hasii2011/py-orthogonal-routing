
from unittest import TestSuite
from unittest import main as unitTestMain

from os import sep as osSep

import json

from codeallybasic.ResourceManager import ResourceManager
from codeallybasic.UnitTestBase import UnitTestBase

from pyorthogonalrouting.Common import Integers

from pyorthogonalrouting.ConnectorPoint import ConnectorPoint
from pyorthogonalrouting.Functions import computePt
from pyorthogonalrouting.Functions import makePt

from pyorthogonalrouting.Grid import ColumnNumber
from pyorthogonalrouting.Grid import Grid
from pyorthogonalrouting.Grid import RowNumber
from pyorthogonalrouting.Line import Line
from pyorthogonalrouting.Line import Lines
from pyorthogonalrouting.Line import linesFactory
from pyorthogonalrouting.Point import Point
from pyorthogonalrouting.Point import Points
from pyorthogonalrouting.Point import pointsFactory
from pyorthogonalrouting.PointGraph import GraphAndConnections
from pyorthogonalrouting.PointGraph import PointGraph
from pyorthogonalrouting.PointGraph import XToYDict
from pyorthogonalrouting.PointGraph import YToPointNodeDict
from pyorthogonalrouting.PointNode import PointNode

from pyorthogonalrouting.Rect import Rect
from pyorthogonalrouting.Rectangle import Rectangle
from pyorthogonalrouting.Rectangle import Rectangles
from pyorthogonalrouting.enumerations.Side import Side


class TestGrid(UnitTestBase):

    RESOURCES_TEST_PACKAGE_NAME: str = 'tests.resources'
    RESOURCES_TEST_DIRECTORY:    str = f'tests{osSep}resources'
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 04 April 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testConstruction(self):
        grid: Grid = Grid()

        self.assertIsNotNone(grid, 'I should exist')

    def testSetOnEmptyGrid(self):

        grid:      Grid      = Grid()
        rectangle: Rectangle = Rectangle.fromLTRB(left=10, top=44, right=100, bottom=200)

        grid.set(row=RowNumber(1), column=ColumnNumber(1), rectangle=rectangle)

        self.assertEqual(2, grid.rows, '')
        self.assertEqual(2, grid.columns, '')

        retrievedRectangle: Rectangle = grid.get(row=RowNumber(1), column=ColumnNumber(1))

        self.assertEqual(retrievedRectangle, rectangle, 'Should be the same')

    def testNoRectangle(self):
        grid:      Grid      = Grid()

        retrievedRectangle: Rectangle = grid.get(row=RowNumber(1), column=ColumnNumber(1))

        self.assertIsNone(retrievedRectangle, 'Should not exist')

    def testNoRectangles(self):

        grid:      Grid      = Grid()

        rectangles: Rectangles = grid.rectangles

        self.assertEqual(0, len(rectangles), 'No rectangles')

    def testMultipleRectangles(self):
        grid:      Grid      = Grid()
        rectangle1: Rectangle = Rectangle.fromLTRB(left=10, top=44,  right=100, bottom=200)
        rectangle2: Rectangle = Rectangle.fromLTRB(left=20, top=88,  right=200, bottom=400)
        rectangle3: Rectangle = Rectangle.fromLTRB(left=40, top=166, right=400, bottom=800)

        grid.set(row=RowNumber(1), column=ColumnNumber(1), rectangle=rectangle3)
        grid.set(row=RowNumber(4), column=ColumnNumber(4), rectangle=rectangle2)
        grid.set(row=RowNumber(8), column=ColumnNumber(8), rectangle=rectangle1)

        rectangles: Rectangles = grid.rectangles

        self.assertEqual(3, len(rectangles), 'No rectangles')

    def testRulersToGrid(self):

        grid: Grid = self._buildTesGrid()

        self.assertEqual(6, grid.rows, 'Incorrect row count')
        self.assertEqual(6, grid.columns, 'Incorrect column count')
        #
        # Check random cells
        #
        expected:  Rectangle = Rectangle(left=160, top=40, width=30, height=120)
        rectangle: Rectangle = grid._gridMap[RowNumber(1)][ColumnNumber(3)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

        expected  = Rectangle(left=190, top=250, width=70, height=60)
        rectangle = grid._gridMap[RowNumber(4)][ColumnNumber(4)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

        expected  = Rectangle(left=160, top=30, width=30, height=10)
        rectangle = grid._gridMap[RowNumber(0)][ColumnNumber(3)]

        self.assertEqual(expected, rectangle, 'Did someone change the algorithm')

    def testGridToSpots(self):

        grid: Grid = self._buildTesGrid()

        pointA: ConnectorPoint = ConnectorPoint(shape=Rect(left=50,  top=50,  width=100, height=100))
        pointB: ConnectorPoint = ConnectorPoint(shape=Rect(left=200, top=200, width=50,  height=100))

        shapeA = Rectangle.fromRect(pointA.shape)
        shapeB = Rectangle.fromRect(pointB.shape)

        shapeMargin: int = 10

        inflatedA: Rectangle = shapeA.inflate(shapeMargin, shapeMargin)
        inflatedB: Rectangle = shapeB.inflate(shapeMargin, shapeMargin)

        gridPoints: Points = Grid.gridToSpots(grid, Rectangles([inflatedA, inflatedB]))

        self.logger.debug(f'{gridPoints=}')
        goldenGridSpots: Points = self._loadTestSpots()

        for goldenPoint in goldenGridSpots:
            self.assertIn(goldenPoint, goldenGridSpots, 'Missing one')

    def testCreateGraph(self):

        grid: Grid = self._buildTesGrid()

        rectA: Rect = Rect(left=50,  top=50,  width=100, height=100)
        rectB: Rect = Rect(left=200, top=200, width=50,  height=100)

        pointA: ConnectorPoint = ConnectorPoint(shape=rectA, side=Side.BOTTOM, distance=0.5)
        pointB: ConnectorPoint = ConnectorPoint(shape=rectB, side=Side.RIGHT,  distance=0.5)

        shapeMargin: int = 10

        shapeA:    Rectangle = Rectangle.fromRect(r=pointA.shape)
        shapeB:    Rectangle = Rectangle.fromRect(r=pointB.shape)

        inflatedA: Rectangle = shapeA.inflate(shapeMargin, shapeMargin)
        inflatedB: Rectangle = shapeB.inflate(shapeMargin, shapeMargin)

        spots:       Points   = pointsFactory()

        def add(pt: Point, dx: int, dy: int):
            spots.append(makePt(pt.x + dx, pt.y + dy))

        # Points of shape antennas
        for connectorPt in [pointA, pointB]:
            p: Point = computePt(p=connectorPt)
            match connectorPt.side:
                case Side.TOP:
                    add(p, dx=0, dy=-shapeMargin)
                case Side.RIGHT:
                    add(p, dx=shapeMargin, dy=0)
                case Side.BOTTOM:
                    add(p, dx=0, dy=shapeMargin)
                case Side.LEFT:
                    add(p, dx=-shapeMargin, dy=0)
                case _:
                    assert False, f'I do not understand that side {connectorPt.side=}'

        gridPoints: Points = Grid.gridToSpots(grid, Rectangles([inflatedA, inflatedB]))

        # Add to spots
        spots = Points(spots + gridPoints)
        #
        #  Whew setup is done
        #
        # Create graph
        graphAndConnections: GraphAndConnections = PointGraph.createGraph(spots)
        graph:       PointGraph = graphAndConnections.graph
        connections: Lines      = graphAndConnections.connections

        goldGraphIndex: XToYDict = self._loadTestGraphIndex()
        goldenLines:    Lines    = self._loadTestConnections()

        for xStr in goldGraphIndex:
            self.assertIn(xStr, graph._index)
            goldenYToPointNodeDict: YToPointNodeDict = goldGraphIndex[xStr]
            generated:              YToPointNodeDict = graph._index[xStr]
            for goldenYStr, goldenPointNode in goldenYToPointNodeDict.items():

                keyExists:  bool = goldenYStr in generated
                self.assertTrue(keyExists, 'Where is my golden key !!')

                generatedValues = generated.values()
                self.logger.debug(f'{generatedValues}')
                valueExists: bool = goldenPointNode in generatedValues
                self.assertTrue(valueExists, f'{xStr=} {goldenYStr=} {goldenPointNode=}')

        # Verify !!!
        for line in connections:
            self.assertIn(line, goldenLines, 'This one is missing')

    def _buildTesGrid(self) -> Grid:

        bigBounds:   Rectangle = Rectangle(left=30, top=30, width=240, height=290)
        bounds:      Rectangle = Rectangle.fromLTRB(bigBounds.left, bigBounds.top, bigBounds.right, bigBounds.bottom)
        verticals:   Integers  = Integers([40, 100, 160, 190, 260])
        horizontals: Integers  = Integers([40, 160, 190, 250, 310])

        grid: Grid = Grid.rulersToGrid(verticals, horizontals, bounds)

        return grid

    def _loadTestSpots(self) -> Points:

        fqFileName: str = ResourceManager.retrieveResourcePath(bareFileName='gridPoints.json',
                                                               resourcePath=TestGrid.RESOURCES_TEST_DIRECTORY,
                                                               packageName=TestGrid.RESOURCES_TEST_PACKAGE_NAME)

        self.logger.debug(f'{fqFileName=}')
        with open(fqFileName, "r") as fp:
            jsonString: str = fp.read()

        gridSpotsDict = json.loads(jsonString)

        goldenGridSpots: Points = self._buildPointListFromJsonDictionary(gridPointsDictionary=gridSpotsDict)

        return goldenGridSpots

    def _loadTestGraphIndex(self):
        fqFileName: str = ResourceManager.retrieveResourcePath(bareFileName='graphIndex.json',
                                                               resourcePath=TestGrid.RESOURCES_TEST_DIRECTORY,
                                                               packageName=TestGrid.RESOURCES_TEST_PACKAGE_NAME)

        self.logger.debug(f'{fqFileName=}')
        with open(fqFileName, "r") as fp:
            jsonString: str = fp.read()

        graphIndexDict = json.loads(jsonString)

        index: XToYDict = XToYDict({})
        for xStrEntry in graphIndexDict:
            jsonYToPointNodeDict = graphIndexDict[xStrEntry]
            self.logger.debug(f'{xStrEntry}: {jsonYToPointNodeDict}')

            yToPointNodeDict: YToPointNodeDict = YToPointNodeDict({})
            index[xStrEntry] = yToPointNodeDict

            for yStr, jsonPointNode in jsonYToPointNodeDict.items():

                jsonData      = jsonPointNode['data']
                jsonDistance  = jsonPointNode['distance']
                x: int = int(jsonData['x'])
                y: int = int(jsonData['y'])

                point: Point = Point(x=x, y=y)

                pointNode: PointNode = PointNode()
                pointNode.data = point
                pointNode.distance = int(jsonDistance)
                yToPointNodeDict[yStr] = pointNode

        return index

    def _loadTestConnections(self):
        fqFileName: str = ResourceManager.retrieveResourcePath(bareFileName='connections.json',
                                                               resourcePath=TestGrid.RESOURCES_TEST_DIRECTORY,
                                                               packageName=TestGrid.RESOURCES_TEST_PACKAGE_NAME)

        self.logger.debug(f'{fqFileName=}')
        with open(fqFileName, "r") as fp:
            jsonString: str = fp.read()

        connectionsDict = json.loads(jsonString)

        lines: Lines = linesFactory()
        for conn in connectionsDict:

            aPt = conn['a']
            bPt = conn['b']
            x: int = int(aPt['x'])
            y: int = int(aPt['y'])
            pointA: Point = Point(x=x, y=y)
            x = int(bPt['x'])
            y = int(bPt['y'])
            pointB: Point = Point(x=x, y=y)
            line: Line = Line(a=pointA, b=pointB)
            lines.append(line)

        return lines

    def _buildPointListFromJsonDictionary(self, gridPointsDictionary) -> Points:

        self.logger.debug(f'{gridPointsDictionary}')
        pointList: Points = Points([])

        for pt in gridPointsDictionary:

            x: int = int(pt['x'])
            y: int = int(pt['y'])
            point: Point = Point(x=x, y=y)
            pointList.append(point)

        return pointList


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestGrid))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
